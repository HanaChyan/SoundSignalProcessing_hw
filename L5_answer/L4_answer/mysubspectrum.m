function y = mysubspectrum(x, fs)

%   作者: 陈锴
%   日期: 2011-4-11
%   音频信号处理课程演示程序：频谱减方法

% 输入参数：
% x: 含噪语音信号
% fs: 采样率
% 输出参数：
% y：频谱减算法的输出信号

x = x(:);                           % 输入信号的列向量化

nw = 2^nextpow2(fs/30);             % 帧长
nm = nw/4;                          % 帧移

win = hamming(nw+1);
win(end) = []; win = win(:);        % 窗函数
win = win/(0.54*nw/nm);             % 抵消窗交叠重构后的增益

i = 0;                              % 用于帧移计数的时序计数

xs = zeros(nw,1);                   % 帧数据（输入）
ys2 = xs;                           % 处理后数据叠加缓存
t = (nw/2+1)*ones(nw/2+1,1);        % xs的频谱幅度
p = (nw/2+1)*ones(nw/2+1,round(3*fs/nm));
                                    % 记录前若干秒（此处3秒）各个频率点的最小，因此该值与采样率、帧移有关

y = zeros(size(x));

while(i+nm<=length(x))              % 判断需要更新帧的数据是否超出输入信号(x)长度，否则跳出循环
    xs = [xs(nm+1:end);x(i+1:i+nm)];% 取x的nm个点与xs的nw-nm个点组成新的xs，实现了数据帧

    XS = fft(xs.*win);              % 求xs加窗后的傅立叶变换
    u = abs(XS(1:end/2+1).^2);      % 求xs的即时频谱
    
    t = t * 0.87 + u * (1-0.87);    % 求xs的短时平滑频谱
    
    p = [t,p(:,1:end-1)];           % 当前的短时频谱与前面若干帧的短时频谱组成了新的频谱组，为求各个频点的最小值做准备
    
    noise = 4*min(p,[],2);          % 求各个频点短时最小频谱，作为噪声估计
    
%   根据讲义中的表达式，求各个频点的增益控制
    G = max(0.02, 1-noise./t);      % 此处最大值操作是为了防止1-noise./t出现0甚至负值的情况，减少语音失真
    G = sqrt(G);
    
    XS = XS.*([G; (G(end-1:-1:2))]);% 将频点的各个增益作用于原始信号（保留了原信号的相位信息）
    ys = real(ifft(XS));            % 对在频域作处理后的信号做逆傅立叶变换
    
    ys2 = ys + [ys2(nm+1:end); zeros(nm,1)];
                                    % 时域信号累加与帧移，消除信号处理过程加窗的边缘衰减
    x(i+1:i+nm) = ys2(1:nm);        % 叠加nw/nm次后，作为输出信号(基于窗函数的数据重构)
    
    i = i + nm;                     % 时序计数增加帧移长度，为下一帧的数据做准备
end
